<!DOCTYPE html>
<html xmlns:fb="http://ogp.me/ns/fb#">
<head>
    <meta charset="UTF-8">
    <meta content="*" http-equiv="Access-Control-Allow-Origin">
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
    <meta content="text/javascript" http-equiv="Content-Script-Type">
    <meta content="text/css" http-equiv="Content-Style-Type">
    <meta content="IE=edge" http-equiv="X-UA-Compatible">
    <title>로그인 : 발그레</title>
    <!--<link rel="icon" href="//img2.memebox.com/static/ui/img/favicon.ico?version=4039" type="image/x-icon"/>-->
    <!--<link rel="shortcut icon" href="//img2.memebox.com/static/ui/img/favicon.ico?version=4039" type="image/x-icon"/>-->
##    <link href="/web/css/commonLegacy.css?v=2km-17bbwp3" rel="stylesheet" type="text/css"><!--}-->
    <link href="/css/loginCommon.css?v=2km-17bbwp3" rel="stylesheet" type="text/css"><!--}-->
    <link href="/css/loginCommon.css" rel="stylesheet" type="text/css">
    <link href="/css/loginCommon.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
</head>
##<body class="memebox" data-controller="memebox/pc/member/login/login" data-controller-domain='{"current":"//frontend-dev.memebox.com/","cdn":"//cdn.memebox.com/","cdnImage":"//cdn.memebox.com/"}' data-controller-info='{"device":"pc","service":"memebox"}' data-controller-message='{"error":""}' id="memebox-service" oncontextmenu="return false" ondragstart="return false">


##<noscript><iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-WMMF2B" style="display:none;visibility:hidden" width="0"></iframe></noscript>
##<script>
##
##    if (window.location.protocol != "https:") {
##        window.location.href = "https:" + window.location.href.substring(window.location.protocol.length);
##    }
##
##    dataLayer = [];
##    (function (w, d, s, l, i) {
##        w[l] = w[l] || [];
##        w[l].push({
##            'gtm.start': new Date().getTime(), event: 'gtm.js'
##        });
##        var f = d.getElementsByTagName(s)[0],
##                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
##        j.async = true;
##        j.src =
##                '//www.googletagmanager.com/gtm.js?id=' + i + dl;
##        f.parentNode.insertBefore(j, f);
##    })(window, document, 'script', 'dataLayer', 'GTM-WMMF2B');
##</script>
##<link href="/web/css/memebox_login.css?v=7kc-1n234ch" rel="stylesheet" type="text/css">
<link href="/css/loginCommon.css?v=7kc-1n234ch" rel="stylesheet" type="text/css">
<div class="layout-structure-content">
    <h1 class="header-main-content-logo-center">
    <a class="back-home" href="/"><img src="/img/login/rebbit.png" width="100px" height="100px"></a>
    </h1>
    <p class="text_under_header">발그레에서 싸게 쇼핑하자</p>
    <div class="login-title-image">
        <span class="login-bigtitle-img"><img src="/img/login/login_title.png" height="35"></span>
    </div>
    <div class="login_form_onpage">
##                <%--<form id="loginfrm" name="loginfrm"--%>
##                <%--action="<c:url value="${ctx}/login"/>"--%>
                <form id="sky-form1" class="log-reg-block sky-form" action="/loginPost" method="post">
##                    <%--<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}">--%>
##                    <%--<form action="${ctx}/j_spring_security_ckeck" method="post">--%>
                    <section>
                        <label class="login-input-text">
                            <div class="input-group-id">
                                <input type="text" placeholder="이메일 (아이디)" name="username" class="form-control_email">

                            </div>
                        </label>
                    </section>

                    <section>
                        <label class="login-input-text-pw">
                            <div class="input-group-pw">
                                <input type="password" placeholder="비밀번호" name="password"
                                       class="form-control_pw">

                            </div>
                        </label>
                    </section>

                    <div class="row margin-bottom-5">
                        <div class="col-xs-6">
                            <label class="checkbox_on_loginform">
                                <input type="checkbox" name="useCookie" class="login_form_checkbox">
                                자동 로그인
                            </label>
                        </div>
                    </div>
                    <div class="login-submit-button">
                    <button class="balgeure_login_submit-Btn" type="submit" value="login">로그인</button>
                    </div>

                </form>

##                <c:if test="${not empty param.fail}">
##                    <font class="bg-color-red">
##                        <p>Your login attempt was not successful, try again</p>
##                        <p>Reason:${sessionScope["SPRING_SECURITY_LAST_EXCEPTION"].message}</p>
##                    </font>
##                    <c:remove scope="session" var="SPRING_SECURITY_LAST_EXCEPTION"/>
##                </c:if>

##                #if ($param.fail)
##                    <font class="bg-color-red">
##                        <p>Your login attempt was not successful, try again</p>
##                        <p>Reason:${sessionScope["SPRING_SECURITY_LAST_EXCEPTION"].message}</p>
##                    </font>
##                    <c:remove scope="session" var="SPRING_SECURITY_LAST_EXCEPTION"/>
##                #end


##                <%--<div class="border-wings">--%>
##                <%--<span></span>--%>
##                <%--</div>--%>
           
           <div class="search_id_and_pw_register">
                <p class="text-center">
                    <a href="#" class="search-email-and-password find_balgeure_email">이메일(아이디) 찾기</a>  |   
                    <a href="#" class="search-email-and-password find_balgeure_password">비밀번호 찾기</a>  |   
                    <a href="#" class="search-email-and-password join_balgeure_register">회원가입</a></p>
           </div>
           
                <div class="simple-sns-login-method">
                    <ul class="simple-login-SNS">
            <li class="simple-login-SNS-list" id="naverLogin">
                <a class="member-SNS_Login member-SNS-naver-login"
                   data-popup='{&quot;window&quot;:true,&quot;url&quot;:&quot;#&quot;,&quot;type&quot;:&quot;POST&quot;,&quot;title&quot;:&quot;naver&quot;}'
                   data-segment='' href="#"><span class="member-SNS-login-icon member-SNS-login-icon-naver">naver</span> <strong
                        class="member-SNS-login-text">계정으로 회원가입</strong></a>
            </li>
            <li class="simple-login-SNS-list" id="facebookLogin">
                <a class="member-SNS_Login member-SNS-facebook-login"
                   data-popup='{&quot;window&quot;:true,&quot;url&quot;:&quot;#&quot;,&quot;type&quot;:&quot;POST&quot;,&quot;title&quot;:&quot;facebook&quot;}'
                   data-segment='' href="#"><span class="member-SNS-login-icon member-SNS-login-icon-facebook">facebook</span>
                    <strong class="member-SNS-login-text">계정으로 회원가입</strong></a>
            </li>
            <li class="simple-login-SNS-list" id="kakaoLogin">
                <a class="member-SNS_Login member-SNS-kakao-login"
                   data-popup='{&quot;window&quot;:true,&quot;url&quot;:&quot;#&quot;,&quot;type&quot;:&quot;POST&quot;,&quot;title&quot;:&quot;kakao&quot;}'
                   data-segment='' href="#"><span class="member-SNS-login-icon member-SNS-login-icon-kakao">kakao</span> <strong
                        class="member-SNS-login-text">계정으로 회원가입</strong></a>
            </li>
        </ul>
                </div>           
            </div>
   
</div>
<!-- S : 로거 환경변수 -->

         <form name="findIdForm" method="post">
	                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" >
	                        <div class="modal-dialog">
	                            <div class="modal-content">
	                                <div class="modal-header">
		                                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
		                                <h4 class="modal-title" id="myModalLabel">아이디 찾기</h4>
	                                </div>
	                                <div class="modal-body">
	                                    <input type="hidden" class="R_email" id="R_email" name="R_email" value="$user.email">
		                                <input type="text" class="name" id="name" name="name" placeholder="이름"><br>
                                        <input type="text" class="phone" id="phone" name="phone" placeholder="핸드폰번호">
                                        <input type="text" class="email_id" id="email_id" name="email_id" value="" readonly>
                                        <span id="guide" style="color:#999"></span>
	                                </div>
	                                <div class="modal-footer">
		                                <button type="button" class="btn btn-default" data-dismiss="modal">취소</button>
		                                <button type="button" class="btn btn-primary" id="findid" name="findid">확인</button>
	                                </div>
	                           </div>
	                       </div>
	                   </div>                   
    </form>
    
    <script>
        function PwBtn() {
        	location.href="auth/08_2_popup";
        }
    </script>
    
    
##<script type="text/javascrt">
##	   _TRK_CP = "/회원/가입";
##	   _TRK_PI = "RGF";
##
##	</script> <!-- E : 로거 환경변수 -->
##
##<script type="text/javascript">
##    if(typeof String.prototype.trim !== 'function') {
##        String.prototype.trim = function() {
##            return this.replace(/^\s+|\s+$/g, '');
##        }
##    }
##</script>

<script src="http://code.jquery.com/jquery-latest.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script src="http://googledrive.com/host/0B-QKv6rUoIcGREtrRTljTlQ3OTg"></script><!-- ie10-viewport-bug-workaround.js -->
    <script src="http://googledrive.com/host/0B-QKv6rUoIcGeHd6VV9JczlHUjg"></script><!-- holder.js -->
    <script src="https://ssl.daumcdn.net/dmaps/map_js_init/postcode.v2.js"></script>
    
    <!-- Validation -->
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="jquery.validate.min.js"></script>
    <script type="text/javascript" src="additional-methods.min.js"></script>
    <script type="text/javascript" src="messages_ko.min.js"></script>
    <script src="/js/common/jquery-3.1.1.min.js"></script>
    
    <script>
$(function() {
    	$('#findid').on('click', function(e) {
    		e.preventDefault;
    		var name = $("#name").val();
    		var phone = $("#phone").val();
    		
    		var formData = new FormData();
    		
    		formData.append("name", name);
    		formData.append("phone", phone);
    		
    		$.ajax({
    			type: "POST",
    			url: "/my/privacy/findId",
    			data: formData,
    		    dataType: "text",
    		    contentType: false,
    		    processData: false,
    		    success: function(formData) {
    		    	console.log(formData);
    		    	$("#email_id").val(formData);
    		    },
    		    error:function(request,status,error) {
    		        alert("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
    		    },
    		});
    	});
    });
</script>

##<script src="/web/js/vendor/jquery-1.9.1.min.js?v=1zg6-1wlu1iw" type="text/javascript">
##</script>
##<script src="/web/js/vendor/store.min.js?v=1z4-ow7o7u" type="text/javascript">
##</script>
##<script src="/web/js/optimize/jquery.cookie.js?v=155-sc6413" type="text/javascript">
##</script>
##<script src="/web/js/vendor/bootstrap.carousel.min.js?v=2so-9297jl" type="text/javascript">
##</script>
##<script src="/web/js/optimize/moment.js?v=u3g-hcxoym" type="text/javascript">
##</script>
##<script src="/web/vendor/fancybox/jquery.fancybox.pack.js?v=hw3-pwygo5" type="text/javascript">
##</script>
##<script src="/web/js/vendor/jquery.number.min.js?v=45v-7x98ds" type="text/javascript">
##</script>
##<script src="/web/js/vendor/swag.min.js?v=e5m-13mr93z" type="text/javascript">
##</script>
##<script src="/web/js/vendor/url.min.js?v=1g5-tp5fnq" type="text/javascript">
##</script>
##<script type="text/javascript">
##
##    !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.1.0";
##        analytics.load("9tsiYz7B0EtNE4w16UG9Kvz00Yf5yvdQ");
##
##        analytics.page({
##            path: window.location.pathname,
##            url: window.location.href,
##            platform: "pc"
##        });
##
##    }}();
##
##    // Code from http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport
##    function isElementInViewport (el) {
##
##        //special bonus for those using jQuery
##        if (typeof jQuery === "function" || el instanceof jQuery) {
##            el = el[0];
##        }
##
##        var rect = el.getBoundingClientRect();
##
##        return (
##                (rect.bottom > 0 && rect.bottom < (window.innerHeight || document.documentElement.clientHeight)) ||
##                (rect.top > 0 && rect.top < (window.innerHeight || document.documentElement.clientHeight))
##        );
##    }
##
##    // Called when a link to a product is clicked.
##    function onProductClick(el) {
##        var ret = {
##            path: window.location.pathname,
##            url: window.location.href,
##            platform: "pc",
##            id: $(el).data("product-id"),                               // Product ID
##            name: $(el).data("product-name"),                           // Product Name
##            brand: $(el).data("product-brand"),                         // Product Brand
##            position: $(el).data("product-position") || $(el).index(),  // Product Position
##            list: $(el).parent().data("productlist-name"),              // Product List
##            currency: 'KRW',                                            // Currency: Korean Won
##            price: $(el).data("product-price"),                         // Product Price
##            label: $(el).data("product-name")                           // Product Name
##        };
##        // GTM tracking
##        if (!!dataLayer) {
##            dataLayer.push({
##                'event': 'productClick',
##                'ecommerce': {
##                    'click': {
##                        'actionField': {'list': ret.list},      // Optional list property.
##                        'products': [{
##                            'name': ret.name,                      // Name or ID is required.
##                            'id': ret.id,
##                            'brand': ret.brand,
##                            'category': ret.list,
##                            'variant': '',
##                            'position': ret.position
##                        }]
##                    }
##                }
##            });
##        }
##        analytics.track("Product Clicked", ret, function(){
##            window.location.href = '/product/' + $(el).data("product-id") + "?list=" + $(el).parent().data("productlist-name")
##        });
##    }
##
##
##    $(function() {
##
##        var productClickProperties = function (el) {
##            var ret = {
##                id: $(el).data("product-id"),                               // Product ID
##                name: $(el).data("product-name"),                           // Product Name
##                list_id: $(el).parent().data("productlist-id"),             // Product List id
##                list_name: $(el).parent().data("productlist-name"),         // Product List name
##                position: $(el).data("product-position") || $(el).index()   // Product Position
##            };
##            //  var ret = {
##            //      path: window.location.pathname,
##            //      url: window.location.href,
##            //      platform: "pc",
##            //      id: $(el).data("product-id"),                               // Product ID
##            //      name: $(el).data("product-name"),                           // Product Name
##            //      brand: $(el).data("product-brand"),                         // Product Brand
##            //      position: $(el).data("product-position") || $(el).index(),  // Product Position
##            //      list: $(el).parent().data("productlist-name"),              // Product List
##            //      currency: 'KRW',                                            // Currency: Korean Won
##            //      price: $(el).data("product-price"),                         // Product Price
##            //      label: $(el).data("product-name")                           // Product Name
##            //  };
##
##            // GTM tracking
##            if (!!dataLayer) {
##                dataLayer.push({
##                    'event': 'productClick',
##                    'ecommerce': {
##                        'click': {
##                            'actionField': {'list': ret.list},      // Optional list property.
##                            'products': [{
##                                'name': ret.name,                      // Name or ID is required.
##                                'id': ret.id,
##                                'brand': ret.brand,
##                                'category': ret.list,
##                                'variant': '',
##                                'position': ret.position
##                            }]
##                        }
##                    }
##                });
##            }
##
##            return ret;
##        };
##        analytics.trackLink($("[segment-event='Product Clicked']"), "Product Clicked", productClickProperties);
##    });
##</script>
##<script src="/web/js/popup.js?v=nj-azlsab" type="text/javascript">
##</script>
##<script src="/web/js/gaUtil.js?v=a8-dbpy9n" type="text/javascript">
##</script>
##<script src="/web/vendor/jquery-placeholder/v2.3.1/jquery.placeholder.js?v=7i4-lzxclj" type="text/javascript">
##</script>
##<script type="text/javascript">
##
##    // jquery: event.keyCode
##    // http://www.cambiaresearch.com/articles/15/javascript-key-codes
##    var keycodes = {
##        BACKSPACE: 8,
##        TAB: 9,
##
##        ENTER: 13,
##        ESCAPE: 27,
##        SPACE: 32,
##
##        SHIFT: 16,
##        CTRL: 17,
##        ALT: 18,
##
##        PAGE_UP: 33,
##        PAGE_DOWN: 34,
##
##        END: 35,
##        HOME: 36,
##        INSERT: 45,
##        DELETE: 46,
##
##        NUM_LOCK: 144,
##
##        CAPS_LOCK: 20,
##
##        LEFT_ARROW: 37,
##        UP_ARROW: 38,
##        RIGHT_ARROW: 39,
##        DOWN_ARROW: 40
##    };
##
##    var validCharArr = [
##        // refer to http://jrgraphix.net/research/unicode_blocks.php
##        '\u0020-\u007F',    // Basic Latin
##        '\u1100-\u11FF',    // Hangul Jamo
##        '\u3130-\u318F',    // Hangul Compatibility Jamo
##        '\uAC00-\uD7AF',    // Hangul Syllables
##        '\u4E00-\u9FFF',    // CJK Unified Ideographs
##        '\u3000-\u303F',    // CJK Symbols and Punctuation
##        '\uFF00-\uFFEF'     // Halfwidth and Fullwidth Forms
##    ];
##
##    var validate = {
##        keycodes: keycodes,
##
##        trim: function (str) {
##            var str = (typeof str !== 'string') ? '' + str : str;
##            return str.replace(/(^\s*)|(\s*$)/g, "");
##        },
##        isNull: function (obj) {
##            return (obj === 0) ? false : (!!obj) ? false : true;
##        },
##        isNotNull: function (obj) {
##            return !isNull(obj);
##        },
##        isEmpty: function (obj) {
##            if (typeof obj == "string") {
##                return (validate.trim(obj).length > 0) ? false : true;
##            }
##            return validate.isNull(obj);
##        },
##        isNotEmpty: function(obj){
##            return !this.isEmpty(obj);
##        },
##        isNumber: function (input) {
##            return typeof input === 'number' && isFinite(input);
##        },
##        isNumeric: function (input) {
##            var RE = /^-{0,1}\d*\.{0,1}\d+$/;
##            return (RE.test(input));
##        },
##        isNumberByEvent: function(e){
##            return e.which && (48 <= e.which && e.which <= 57 || e.which == keycodes.BACKSPACE);
##        },
##        defaultValue: function(arg, defaultValue) {
##            if (this.isEmpty(arg)) return defaultValue;
##            return arg
##        },
##        isKor: function (str) {
##            str = validate.trim(str);
##            return (/^[가-힝]+$/).test(str);
##        },
##        isEng: function (str) {
##            str = validate.trim(str);
##            return (/^[a-zA-Z]+$/).test(str);
##        },
##        isName: function (str) {
##            str = validate.trim(str);
##            return (/^[가-힝a-zA-Z]+$/).test(str);
##        },
##        isEmail: function (str) {
##            return (/\w+([-+.]\w+)*@\w+([-.]\w+)*\.[a-zA-Z]{2,4}$/).test(str);
##        },
##        isCellPhone: function(first, second, third) {
##            var cellPhoneNumber = first + "-" + second + "-" + third;
##            if (!this.isTel(cellPhoneNumber)) return false;
##            var secondPattern = "010" === first ? /\d{4}/ : /\d{3,4}/;
##            var thirdPattern = /\d{4}/;
##            var validSecond = secondPattern.test(second);
##            var validThird = thirdPattern.test(third);
##            if (validSecond && validThird) return true;
##            return false
##        },
##        cellphoneByAll : function(cellphoneNumber){
##            var cellphoneByAll = /^(01[016789]{1})-?[0-9]{3,4}-?[0-9]{4}$/;
##            return cellphoneByAll.test(cellphoneNumber);
##        },
##        isSelected: function( selectValue ){
##            return selectValue.length > 0;
##        },
##        isTel: function(val) {
##            var phonestr = /^\d{2,6}-\d{3,4}-\d{4}$/;
##            if (!phonestr.test(val)) return false;
##            else return true
##        },
##        isValidCharacters: function(val) {
##            if (val != null && val != "") {
##                var formatStr = "^[" + validCharArr.join('') + "]*$";
##                var format = new RegExp(formatStr);
##                if (!format.test(val)) {
##                    return false;
##                }
##            }
##            return true;
##        }
##    };
##
##    var utility = {
##        // element의 data를 json 형식으로 리턴한다.
##        data: function (element, attributeName) {
##            var data = $(element).data(attributeName);
##
##            if (typeof data === 'string') {
##                try {
##                    data = $.parseJSON(data);
##                } catch (err) {
##                }
##            }
##            return data;
##        },
##
##        // 단순한 dom 요소 선택을 위한 용도
##        uiEnhancements: function (element) {
##            var $element = $(this.element || element || document),
##                    uiObject = this.ui || this;
##
##            // dom 갱신되는 경우에 다시 dom을 탐색하기 위해서 string객체저장
##            if (!uiObject.__uiString) {
##                uiObject.__uiString = $.extend(true, {}, uiObject);
##            }
##
##            if (this.ui) {
##                this.element = $element;
##            }
##            for (var key in uiObject.__uiString) {
##                if (key !== "__uiString") {
##                    uiObject[key] = (typeof uiObject.__uiString[key] === "function") ? uiObject.__uiString[key]()
##                            : $element.find(uiObject.__uiString[key]);
##                }
##            }
##
##            return {
##                element: $element,
##                ui: uiObject
##            }
##        },
##
##        cssRedraw: function(selector){
##            $(selector).offset();
##        },
##
##        event: function(){
##            var o = $({});
##            $.subscribe   = function(){ o.on.apply(o, arguments); };
##            $.unsubscribe = function(){ o.off.apply(o, arguments); };
##            $.publish     = function(){ o.trigger.apply(o, arguments); };
##
##            window.publish = function(){
##                o.trigger.apply(o, arguments);
##            }
##        },
##
##        price: {
##            /**
##             * 숫자를 3자리씩 점을 찍어 통화 단위로 리턴
##             * @param number
##             * @returns string
##             */
##            addComma: function (number) {
##                var reg = /(^[+-]?\d+)(\d{3})/;
##                if (isNaN(number)) {
##                    return 0;
##                }
##                number += '';
##                while (reg.test(number)) {
##                    number = number.replace(reg, '$1' + ',' + '$2');
##                }
##                return number;
##            },
##
##            /**
##             * ,이 있는 통화 단위를 숫자로 리턴
##             * @param string
##             * @returns number
##             */
##            removeComma: function (string) {
##                var value;
##                string = string.replace(/[^-\d]/g, "");
##                value = (isNaN(string)) ?  0 : Number(string);
##                return value;
##            }
##        },
##
##        cookie: {
##            /**
##             * 쿠키 생성하기
##             * @param name
##             * @param value
##             * @param max_age 시간(1시간)단위, 값이 없는 경우 Session 종료시 캐시값도 같이 삭제됨
##             * @param path
##             * @param domain
##             */
##            set: function(name,value,max_age,path,domain){
##                var cookieString = encodeURIComponent(name) + "=" + encodeURIComponent(value)
##                        + "; path=" + (path ? path : "/")
##                        + "; domain=" + (domain ? domain : document.domain);
##
##                // max_age 값이 있는 경우만 저장일을 설정하고
##                // max_age 값이 없는 경우 Session 종료될때 쿠키도 삭제될 수 있도록 설정
##                if(max_age){
##                    var today = new Date();
##                    var expires = new Date();
##                    expires.setTime( today.getTime() + (1000*60*60*max_age) );
##                    cookieString += "; expires=" + expires.toGMTString();
##                }
##                document.cookie = cookieString;
##            },
##            get: function(name){
##                var allCookies = document.cookie;
##                var strCnt = name.length;
##                var pos = allCookies.indexOf(name+"=");
##
##                if(pos == -1) return undefined;
##
##                var start = pos + strCnt+1;
##                var end = allCookies.indexOf(";", start);
##                if(end == -1) end = allCookies.length;
##                var value = allCookies.substring(start, end);
##                return decodeURIComponent(value);
##            },
##            /**
##             * set 메소드와 같은 param 를 가진다.
##             * @param name
##             * @param path
##             * @param domain
##             */
##            remove: function(name,path,domain){
##                path   = path ? path : "/";
##                domain = domain ? domain : document.domain;
##                utility.cookie.set(name, "", -1, path, domain);
##            }
##        },
##
##        cursor: {
##            setPosition: function($tag, position){
##                    $tag.each(function() {
##                if(this.setSelectionRange) {
##                this.focus();
##                this.setSelectionRange(position.start, position.end);
##                } else if(this.createTextRange) {
##                var range = this.createTextRange();
##                range.collapse(true);
##                range.moveEnd('character', position.end);
##                range.moveStart('character', position.start);
##                range.select();
##                }
##                });
##            },
##            getPosition: function($tag){
##                var tag = $tag.get(0);
##                var position = { start: 0 , end: 0 };
##
##                // ie 10 이상 & 그외 브라우저.
##                if ( tag.selectionStart ){
##                    position.start = tag.selectionStart;
##                    position.end = tag.selectionEnd;
##                }
##
##                // ie 9 이하.
##                else if ( document.selection ){
##                    var range = document.selection.createRange();
##
##                    var copyRange = range.duplicate();
##                    copyRange.expand("textedit");
##                    copyRange.setEndPoint("EndToEnd", range);
##
##                    var start = copyRange.text.length - range.text.length;
##                    var end = start - range.text.length;
##
##                    position.start = parseInt( start );
##                    position.end = parseInt( end );
##                }
##                return position;
##            }
##        }
##    };
##
##    var DisplayRequired = function () {
##        var controller = {
##
##            // 유효검증 여부 확인
##            validate: function($element, isValidate, message){
##                if(!message){
##                    message = $element.data('required-message')
##                }
##
##                if($element.data('required-run')){
##                    this.message($element, isValidate, message);
##                }else{
##                    isValidate = false;
##                }
##                return isValidate;
##            },
##
##            // 유효검증 표현 - 노출 / 삭제
##            message: function($element, isValidate, message){
##                var $wrap = $element.closest('.'+$element.data('required-wrap'));
##                var $validate = $wrap.siblings('.validate-message');
##
##                if(isValidate){
##                        $wrap.removeClass('notValidate');
##                        $validate.hide();
##                }else{
##                        $wrap.addClass('notValidate');
##                        $validate.text(message).show();
##                }
##            }
##
##        };
##        return controller;
##    };
##
##    var Captcha = function ($element) {
##        var controller = {
##            element: $element,
##            ui: {
##                param_captcha: '[name=captcha]',
##                refresh: '.inputGroups-captcha-refresh',
##                image: '.inputGroups-captcha-image'
##            },
##
##            //오류 메시지 모음
##            message: {
##                SYSTEM_ERROR: '잠시 후 다시 시도해 주세요.'
##            },
##
##            displayRequired: new DisplayRequired(),
##
##            // 초기화
##            _initialize: function () {
##                utility.uiEnhancements.call(this);
##                this.ui.param_captcha.val('--');
##                this._addEventListener();
##            },
##
##            // 이벤트 등록
##            _addEventListener: function () {
##                this.element
##                        .on('focusin focusout', this.ui.__uiString.param_captcha, $.proxy(this._requiredFocusEvent,this))
##                        .on('click', this.ui.__uiString.refresh, $.proxy(this._refreshEvent,this))
##
##            },
##
##            // 포커스 이벤트
##            _requiredFocusEvent: function(event){
##                var $element = $(event.currentTarget);
##                switch (event.type) {
##                    case 'focusin':
##                        this.displayRequired.message($element, true, '');
##                        break;
##                    case 'focusout':
##                            $element.data('required-run',true);
##                        this.validate();
##                        break;
##                }
##            },
##
##            _refreshEvent: function(event){
##                event.preventDefault();
##                //                var $element = $(event.currentTarget);
##                //                var href =  $element.attr('href');
##                //
##                //                this._ajaxRegisterCaptcha(href)
##                checkCaptcha();
##            },
##
##            // 캡차 이미지 요청
##            _ajaxRegisterCaptcha: function(href){
##                $.ajax({
##                    url: href
##                }).done(function(result){
##                    if(result.status === 'success'){
##                        controller.ui.image.attr('src', result.data.image.url)
##                    }else{
##                        alert(result.message)
##                    }
##                }).fail(function() {
##                    alert(controller.message.SYSTEM_ERROR);
##                });
##            },
##
##            // 유효 검증
##            validate: function(){
##                var $element = this.ui.param_captcha;
##                var isValidate = true;
##                if(validate.isEmpty($element.val())){
##                    isValidate = false;
##                }
##                return this.displayRequired.validate($element, isValidate);
##            },
##
##            // 캡차 화면 노출
##            appendElement: function($element, data){
##                    $element.html(captcha_templates.captcha({captcha:data}));
##                utility.uiEnhancements.call(this);
##                this._addEventListener();
##            }
##
##        };
##        controller._initialize();
##        return {
##            validate : function(){return controller.validate()},
##            appendElement: function($element, data){return controller.appendElement($element, data)}
##        };
##    };
##
##    var Password = function ($element, option) {
##        var controller = {
##
##            element: $element,
##            ui: {
##                param_password: '[name=password]'
##            },
##
##            message: {
##                isEmpty: '비밀번호를 입력해 주세요',
##                a: '영문(대소문자), 숫자, 특수문자 중 2가지 이상을 조합하여 작성합니다.',
##                b: '비밀번호에 동일한 문자나 숫자를 연속으로 사용할 수 없습니다.',
##                c: '비밀번호는 6~15자 이내로 입력 바랍니다.'
##            },
##
##            displayRequired: new DisplayRequired(),
##
##            // 초기화
##            _initialize: function () {
##                utility.uiEnhancements.call(this);
##
##                if(this.ui.param_password.data('required')){
##                    this._addEventListener();
##                }
##            },
##
##            // 이벤트 등록
##            _addEventListener: function () {
##                this.element
##                        .on('focusin focusout', this.ui.__uiString.param_password, $.proxy(this._requiredFocusEvent,this))
##                        .on('keyup', this.ui.__uiString.param_password, $.proxy(this._passwordKeyEvent,this))
##            },
##
##            // 포커스 이벤트
##            _requiredFocusEvent: function(event){
##                var $element = $(event.currentTarget);
##
##                switch (event.type) {
##                    case 'focusin':
##                        this.displayRequired.message($element, true, '');
##                        break;
##                    case 'focusout':
##                        this.ui.param_password.data('required-run',true);
##                        this.validate();
##                        break;
##                }
##            },
##
##            // 비밀번호 입력
##            _passwordKeyEvent: function(event){
##                var $element = $(event.currentTarget);
##                var temp = $element.val();
##                var value = temp.replace(/(\s)/g, '');
##
##                    $element.val(value);
##            },
##
##            // 유효 검증
##            validate: function(){
##                var isValidate = true;
##                var $element = this.ui.param_password;
##                var value = validate.trim($element.val());
##                var result;
##
##                if(option.hasOwnProperty('validate')){
##                    result = {
##                        isValid: !validate.isEmpty(value),
##                        message: this.message.isEmpty
##                    };
##                }else{
##                    result = this._validatePassword(value);
##                }
##                if(!result.isValid){
##                    var message = result.message;
##                    isValidate = false;
##                }
##
##                return this.displayRequired.validate($element, isValidate, message);
##            },
##
##            _validatePassword: function (str) {
##                var isValidPassword = true;
##                var security_step = 0;
##                var message = '';
##                var reg_sequential = {
##                    english : /[a-zA-Z]\a\a/,
##                    number : /(\w)\1\1/
##                };
##                var reg_character = {
##                    english : /.*[a-zA-Z]/,
##                    specialCharacter : /.*[!@#$%^&+=]/,
##                    number : /.*[0-9]/
##                };
##
##                // 연속된 문자 숫자 확인
##                for(var sequential_key in reg_sequential){
##                    if (reg_sequential[sequential_key].test(str)) {
##                        message = this.message.b;
##                        isValidPassword = false;
##                    }
##                }
##
##                if( !this._checkSequencialNumber(str,4) ){
##                    message = this.message.b;
##                    isValidPassword = false;
##                }
##
##                // 필요 문자 여부 확인
##                for(var character_key in reg_character){
##                    if (reg_character[character_key].test(str)) {
##                        ++security_step;
##                    }
##                }
##
##                if (security_step < 2) {
##                    message = this.message.a;
##                    isValidPassword = false;
##                }
##
##                if(str.length < 6 || str.length > 15 ){
##                    message = this.message.c;
##                    isValidPassword = false;
##                }
##
##                return {
##                    isValid: isValidPassword,
##                    message: message
##                }
##            },
##
##            _checkSequencialNumber: function (str, limit){
##                var origin, d, p, n = 0;
##                var limitLength = limit == null ? 4 : limit;
##                for(var i=0; i<str.length; i++){
##                    var c = str.charCodeAt(i);
##                    if(i > 0 && (p = origin - c) >-2 && p < 2 && (n = p == d ? n+1 : 0) > limitLength-3){
##                        return false;
##                    }
##                    d = p;
##                    origin = c;
##                }
##                return true;
##            }
##
##        };
##        controller._initialize();
##        return {
##            validate : function(){return controller.validate()}
##        };
##    };
##
##    var Email = function ($form, option) {
##        var controller = {
##
##            element: $form,
##            ui: {
##                param_email: '[name=email]'
##                ,hostMobileSelect : 'select.inputGroups-email-host-select'
##
##                ,hostPCSelect : 'div.inputGroups-email-host-select'
##                ,hostSelectBox: '.inputGroups-email-wrap .select-design-viewer-list'
##                ,hostSelectOption: '.inputGroups-email-wrap .inputGroups-email-host-option'
##            },
##
##            API: {
##                checkRegisterUser: '/member/checkRegisterUser'
##            },
##
##            //오류 메시지 모음
##            message: {
##                EMPTY: '이메일을 입력해주세요.',
##                SYSTEM_ERROR: '잠시 후 다시 시도해 주세요.'
##            },
##
##            displayRequired: new DisplayRequired(),
##
##            // 초기화
##            _initialize: function () {
##                utility.uiEnhancements.call(this);
##
##                if(option.hasSelect){
##                    var $param_email = this.ui.param_email;
##                    var value = $param_email.val();
##
##                    // pc의 경우 select를 디자인으로 바꾸어야 한다
##                    if(option.device === 'pc'){
##                        this._makeEmailSelect();
##                    }
##                    if(this.ui.param_email.data('required')){
##                        if(value.length > 0){
##                            //서버로 부터 값을 받았다면 유효검증 통과
##                                $param_email.data('required-validate',true);
##                        }
##                        // 필수 입력일경우 이벤트를 통해 값확인
##                        this._addEventListener();
##                    }
##                }
##                this._eventListener();
##            },
##
##            // 셀렉트 오브젝트
##            _makeEmailSelect: function(){
##                var $hostSelect = this.ui.hostPCSelect;
##                var selectData = $hostSelect.data('options');
##                var event = selectData.event;
##                var select = new Select(selectData);
##                var selectElement = select.getElement();
##
##                    $hostSelect.append(selectElement);
##                $.subscribe('designSelect.'+event+'.select', $.proxy(this._hostSelectPCEvent, this));
##            },
##
##            // 기본 이메일 이벤트 등록
##            _eventListener: function () {
##                this.element
##                        .on('focusin focusout', this.ui.__uiString.param_email, $.proxy(this._requiredFocusEvent,this))
##            },
##
##            // 호스트 변경 이벤트 등록
##            _addEventListener: function () {
##                this.element
##                        .on('change', this.ui.__uiString.hostMobileSelect, $.proxy(this._hostSelectMobileEvent, this))
##            },
##
##            // 포커스 이벤트
##            _requiredFocusEvent: function(event){
##                var $email = $(event.currentTarget);
##
##                switch (event.type) {
##                    case 'focusin':
##                            $email.data('required-validate',false);
##                        this.displayRequired.message($email, true, '');
##                        break;
##                    case 'focusout':
##                            $email.data('required-run',true);
##                        this.validate();
##                        break;
##                }
##            },
##
##            // mobile 이메일 호스트 변경
##            _hostSelectMobileEvent: function(event){
##                this._makeEmailText($(event.currentTarget).val())
##            },
##
##            // PC 이메일 호스트 select 오픈
##            _hostSelectPCEvent: function (event, data) {
##                this._makeEmailText(data.data[0].value);
##            },
##
##            // 이메일 호스트 선택시 input value 변경
##            _makeEmailText: function(host){
##                var currentEmailValue = this.ui.param_email.val();
##                var emailId = currentEmailValue.replace(/@.*/, '');
##                var cursorPosition = emailId.length;
##                var madeEmailValue = emailId + host;
##
##                this.ui.param_email.val(madeEmailValue);
##                this._setSelectionRange(this.ui.param_email.get(0), cursorPosition, cursorPosition);
##            },
##
##            // 이메일 호스트 선택시 커서 위치 변경.
##            _setSelectionRange: function(input, selectionStart, selectionEnd) {
##                if (input.setSelectionRange) {
##                    $(input).focus();
##                    input.setSelectionRange(selectionStart, selectionEnd);
##                }
##                else if (input.createTextRange) {
##                    var range = input.createTextRange();
##                    range.collapse(true);
##                    range.moveEnd('character', selectionEnd);
##                    range.moveStart('character', selectionStart);
##                    range.select();
##                }
##            },
##
##            // 유효 검증
##            validate: function(){
##                var $email = this.ui.param_email;
##                var isValidate = $email.data('required-validate');
##                var value = validate.trim($email.val());
##                var message;
##
##                if(option.validate === 'null'){
##                    if(!validate.isEmpty(value)){
##                        isValidate = true;
##                    }else{
##                        message = this.message.EMPTY;
##                    }
##                }else{
##                    if(!isValidate){
##                        //유효검증이 완료 되어 있지 않으면.
##                        if(!validate.isEmail(value)){
##                            isValidate = false;
##                        }else{
##                            message = ' ';
##                            controller._ajaxRegisterEmail($email, isValidate);
##                            isValidate = false;
##                        }
##                    }
##                }
##
##                return this.displayRequired.validate($email, isValidate, message);
##            },
##
##            // 중복 이메일 서버 체크
##            _ajaxRegisterEmail: function($email){
##                $.ajax({
##                    url: this.element.data('api').checkRegisterUser.url,
##                    type: this.element.data('api').checkRegisterUser.type,
##                    data: {email:$email.val()}
##                }).done(function(result){
##                    if(result.status === 'success'){
##                        controller._doneAjaxEmail(result, $email);
##                    }else{
##                        alert(result.message)
##                    }
##                }).fail(function() {
##                    alert(controller.message.SYSTEM_ERROR);
##                });
##            },
##
##            // 이메일 중복 확인 완료
##            _doneAjaxEmail: function(result, $email){
##                var isValidate = true;
##
##                if(result.status === 'success'){
##                    if(result.isRegisterEmail){
##                        isValidate = false;
##                    }
##                }
##                    $email.data('required-validate',isValidate);
##                this.displayRequired.message($email, isValidate, result.message);
##            }
##
##        };
##        controller._initialize();
##        return {
##            validate : function(){return controller.validate()}
##        };
##    };
##
##    var AutoLogin = function ($element) {
##        var controller = {
##
##            element: $element,
##            ui: {
##                param_autoLogin: '[name=autoLogin]'
##            },
##
##            //오류 메시지 모음
##            message: {
##
##            },
##
##            displayRequired: new DisplayRequired(),
##
##            // 초기화
##            _initialize: function () {
##                utility.uiEnhancements.call(this);
##
##                this._addEventListener();
##            },
##
##            // 이벤트 등록
##            _addEventListener: function () {
##
##            },
##
##            // 포커스 이벤트
##            _requiredFocusEvent: function(event){
##
##            },
##
##            _refreshEvent: function(event){
##
##            },
##
##            // 유효 검증
##            validate: function(){
##                return this.displayRequired.validate($element, true);
##            },
##
##            // 캡차 화면 노출
##            appendElement: function($element, data){
##
##            }
##
##        };
##        controller._initialize();
##        return {
##            validate : function(){return controller.validate()},
##            appendElement: function($element, data){return controller.appendElement($element, data)}
##        };
##    };
##
##    var LogIn = function () {
##        var controller = this.controller = {
##
##            element: '#memebox-service',
##            ui: {
##                form: '.login-form'
##                ,submit: '.login-form-submit'
##                ,param_required: '[data-required="true"]'
##                ,loginCaptcha: '.login-captcha'
##                ,loginCSCenter: '.login-CSCenter'
##                ,password: '[name=password]'
##                ,captcha: '[name=captcha]'
##            },
##
##            message: {
##                FAIL_SIGN_UP: '회원가입에 실패 하였습니다. 다시한번 시도해 주세요.',
##                SYSTEM_ERROR: '서버통신에 실패 다시한번 시도해 주세요.',
##                SYSTEM_CELLPHONE_ERROR: '번호인증 전송이 실패했습니다. 잠시 후 다시 시도해 주세요.',
##                EMPTY: '필수 입력란입니다.',
##                VERIFICATION: '인증을 하여야 합니다.',
##                CHECK_INPUT: '입력값을 다시 한번 확인해 주세요.'
##            },
##
##            inputGroups : null,
##            displayRequired: new DisplayRequired(),
##
##            // 초기화
##            initialize: function () {
##                utility.uiEnhancements.call(this);
##                var device = this.element.data('controller-info').device;
##
##                //input 요소
##                this.inputGroups = {
##                    email : new Email(this.ui.form, {device: device, hasSelect: false, validate:'null'}),
##                    password : new Password(this.ui.form, {validate:'null'}),
##                    captcha : new Captcha(this.ui.form),
##                    autoLogin: new AutoLogin(this.ui.form)
##                };
##
##                this.setPlaceholder();
##                // 스크립트 로딩전 submit 방지
##                this.ui.submit.prop('disabled', false);
##                this.addEventListener();
##            },
##
##            //하위 호환 placeholder 라이브러리 작동.
##            setPlaceholder: function($Placeholder){
##                if($Placeholder){
##                        $Placeholder.placeholder();
##                }else{
##                    $('input').each(function(index, element){
##                        var $element = $(element);
##                        var type = $element.attr('type');
##                        if(type === 'text' || type === 'password' || type === 'tel' || type === 'number' ){
##                                $element.placeholder();
##                        }
##                    });
##                }
##            },
##
##            // 이벤트 등록
##            addEventListener: function () {
##                this.element.off()
##                        .on('submit', this.ui.__uiString.form, $.proxy(this.submitEvent,this))
##                        .on('focusin', this.ui.__uiString.param_required, $.proxy(this._requiredFocusEvent,this));
##            },
##
##            // 포커스 이벤트
##            _requiredFocusEvent: function(){
##                controller.displayRequired.message(controller.ui.submit, true, '');
##            },
##
##            // 확인 (입력값 전송)
##            submitEvent: function(event) {
##                event.preventDefault();
##                var isValidate = true;
##                var requestData = {};
##
##                $('input[name]').each(function(index, element){
##                    var $element = $(element);
##                    var name = $element.attr('name');
##
##                    if( $element.data('required')){
##                            $element.data('required-run',true);
##
##                        requestData[name] = $element.val();
##                        if(!controller.inputGroups[name].validate()) {
##                            if(name != 'captcha' || isCaptchaLoaded){
##                                isValidate = false;
##                            }
##                        }
##                    }
##                });
##                requestData.autoLogin   = $('input[name=autoLogin]').prop( "checked" ) ? $('input[name=autoLogin]').val() : '';
##                requestData.captchaText = $('input[name=captcha]').val().toUpperCase();
##
##                if( isValidate ){
##                    this._ajaxMemberConfirmation(requestData)
##                }
##            },
##
##            // 로그인 서버 진행
##            _ajaxMemberConfirmation: function(requestData){
##
##
##                loginAction(requestData, function(message, isCaptcha){
##                    if(isCaptcha){
##                        controller.ui.captcha.val('');
##                        controller.ui.password.val('');
##                    }
##                    if(!isCaptcha || isCaptchaLoaded){
##                        controller.displayRequired.message(controller.ui.submit, false, message);
##                    }
##                    isCaptchaLoaded = isCaptcha;
##
##                    controller.setPlaceholder(controller.ui.captcha);
##
##                });
##            }
##
##        };
##        controller.initialize();
##    };
##    var logIn = new LogIn();
##</script>
##<script type="text/javascript">
##
##    var isCaptchaLoaded = false;
##    function checkCaptcha(callack){
##        $.get("/ajax/captcha/check", {loginId: $("[name=email]").val()}, function (data) {
##            if(data && data.isCaptcha){
##                $("[class=inputGroups-captcha-image]").attr('src', '/ajax/captcha/download?__='+Math.random());
##                $("[class=login-captcha]").show();
##                $("[class=login-CSCenter]").show();
##            }else{
##                $("[class=login-captcha]").hide();
##                $("[class=login-CSCenter]").hide();
##            }
##            if(callack){
##                callack(data.isCaptcha);
##            }
##        });
##    }
##    checkCaptcha();
##    $( window ).unload(function() {
##        $("[name=captcha]").val('');
##        $("#email").val('');
##        $("#password").val('');
##    });
##
##    var autoLoginLabel = $("#autoLoginLabel");
##    autoLoginLabel.bind("click", function (event) {
##        if (autoLoginLabel.hasClass("on")) {
##            autoLoginLabel.removeClass("on");
##            $("#autoLogin").attr("checked", false);
##        } else {
##            autoLoginLabel.addClass("on");
##            $("#autoLogin").attr("checked", true);
##        }
##    });
##
##    var email = $('#email');
##    if (email.val()) {
##        $('#email').focus();
##    } else {
##        email.focus();
##    }
##
##    $('.warning').hide();
##
##    // 아이디 찾기!
##    $('#accountFind').click(function (e) {
##        MEMEBOX.popup.open('/my/popupFindAccount', 400, 400);
##    });
##
##    // 비밀번호 찾기
##    $('#passwordFind').click(function (e) {
##        MEMEBOX.popup.open('/my/popupFindPw', 415, 555);
##    });
##
##    $('#loginForm').submit(function (e) {
##        e.preventDefault();
##        //        sendGA('로그인,로그인_이메일');
##        loginAction();
##    });
##    /***
##     * memeWeb-1594
##     * 이메일로 회원가입 재활성화
##     * 이메일 로그인버튼의 클릭 이벤트 삭제.
##     */
##    /*
##    $('#emailLogin').click(function(e) {
##        alert('이메일 회원가입이 일시적으로 중단됩니다. 본인의  sns 계정(네이버,페이스북)을 통해 간편회원가입 해주세요.\n빠른시일내에 이메일 회원가입이 오픈될 수 있도록 노력하겠습니다. ');
##        return false;
##    });
##    */
##
##    function checkProtocol(protocol, snsKind){
##        return true;
##        //        if (window.location.protocol != protocol+":") {
##        //            var curl = window.location.href;
##        //            var pattern = /[\&\?][a-z]+Login\=true/gi;
##        //            //var match   = pattern.exec(curl);
##        //            curl = curl.replace(pattern, "");
##        //            curl += curl.indexOf("?") > 0 ? "&" + snsKind + "Login=true" : "?" + snsKind + "Login=true";
##        //            window.location.href = "http:" + curl.substring(window.location.protocol.length);
##        //            return false;
##        //        }else{
##        //            return true;
##        //        }
##    }
##
##
##
##    $("#kakaoLogin").click(function (e) {
##        if (checkProtocol('http', 'kakao')) {//카톡은 http만 가능
##            $.post("/sns/kakaoLoginUrl", function (result) {
##                MEMEBOX.popup.open(result.data, 500, 500);
##
##            });
##        }
##    });
##
##
##    $("#naverLogin").click(function (e) {
##        if (checkProtocol('https', 'naver')){
##            $.post("/sns/naverLoginUrl", function (result) {
##                MEMEBOX.popup.open(result.data, 500, 500);
##            });
##        }
##
##    });
##
##    $("#facebookLogin").click(function (e) {
##        if (checkProtocol('https', 'fb')){
##            $.post("/sns/fbLoginUrl", function (result) {
##                MEMEBOX.popup.open(result.data, 1000, 690);
##            });
##        }
##    });
##
##    if(window.location.href.indexOf('kakaoLogin=true') != -1){
##        document.getElementById('kakaoLogin').click();
##    }else if(window.location.href.indexOf('naverLogin=true') != -1){
##        document.getElementById('naverLogin').click();
##    }else if(window.location.href.indexOf('fbLogin=true') != -1){
##        document.getElementById('fbLogin').click();
##    }
##
##    function loginAction(request, warnOut) {
##
##        request.redirectUrl = $("#redirectUrl").val();
##        <!--request._csrf = "";-->
##
##        if (!request.email) {
##            warnOut('* 이메일을 입력해주세요.');
##            return;
##        }
##
##        if (!request.password) {
##            warnOut('* 비밀번호를 입력해주세요.');
##
##            return;
##        }
##
##        if (request.password.length < 4) {
##            warnOut('* 비밀번호를 네 자리 이상 입력해주세요.');
##
##            return;
##        }
##        $.post("/login", request, function (result) {
##
##            if (result && result.msg) {
##                alert(result.msg);
##            }
##            // Segment Track Login
##            analytics.track('Logged In', {category: 'Account', label: 'Normal Email Login'});
##
##            if (result && result.data && result.data.userId) {
##                var data = result.data;
##
##                $.ajax({
##                    url: '/coupon/issueNaverCoupon/?target=cookie&userId=' + result.data.userId,
##                    timeout: 1000,
##                    cache: false,
##                    redirectUrl: request.redirectUrl
##                }).done(function (jqXHR) {
##                    if (jqXHR.msg) {
##                        alert(jqXHR.msg);
##                    }
##                }).fail(function (jqXHR) {
##                    if (jqXHR.msg) {
##                        alert(jqXHR.msg);
##                    }
##                }).always(function () {
##                    //                    sendGA('로그인,로그인성공_이메일');
##
##                    window.location.href = '/bridgeGA?redirectUrl=' + data.redirectUrl;
##                });
##            } else {
##                window.location.href = result.data.redirectUrl;
##            }
##
##        }).fail(function (jqXHR) {
##
##            checkCaptcha(function(isCaptcha){
##                if (jqXHR.responseText) {
##                    var result = JSON.parse(jqXHR.responseText);
##                    warnOut('* ' + result.msg, isCaptcha);
##                }
##            });
##
##        });
##    }
##
##    function goKakaoProcess() {
##        var request = {};
##        request.autoLogin = $("#autoLogin:checked").val();
##        request.redirectUrl = $("#redirectUrl").val();
##        $.post("/sns/kakaoLogin/process", request, function (result) {
##            // Segment Track Login
##            analytics.track('Logged In', {category: 'Account', label: 'Kakao Login'});
##
##            if (result.data.userId) {
##                $.ajax({
##                    url: '/api/v4/coupon/issueNaverCoupon/?target=cookie&userId=' + result.data.userId,
##                    timeout: 1000,
##                    cache: false
##                }).always(function () {
##                    alert(result.data.userName + ' 님 환영합니다.');
##                    //                    sendGA('로그인,로그인성공_카카오');
##
##
##
##                    window.location.href = result.data.redirectUrl;
##                });
##            } else if (result.data.sameUser) {
##                //window.location.href = '/snsLogin';
##                $("#email").val(result.data.snsEmail);
##                $("#password").val('');
##                logIn.controller.displayRequired.message(logIn.controller.ui.submit, false, '* 연동하려는 아이디로 가입되어 있습니다.\n비밀번호를 입력해주세요.');
##            } else {
##                window.location.href = '/signup/acceptTerms';
##            }
##        }).fail(function (jqXHR) {
##            if (jqXHR.responseText) {
##                var result = JSON.parse(jqXHR.responseText);
##                alert(result.msg);
##            }
##        });
##    }
##
##    function goNaverProcess() {
##        var request = {};
##        request.autoLogin = $("#autoLogin:checked").val();
##        request.redirectUrl = $("#redirectUrl").val();
##
##        $.post("/sns/naverLogin/process", request, function (result) {
##
##            // Segment Identify UserService and Track Login
##            analytics.track('Logged In', {category: 'Account', label: 'Naver Login'});
##
##            if (result.data.userId) {
##                $.ajax({
##                    url: '/coupon/issueNaverCoupon/?target=cookie&userId=' + result.data.userId,
##                    timeout: 1000,
##                    cache: false
##                }).always(function () {
##                    //                    sendGA('로그인,로그인성공_네이버');
##
##                    var message = result.msg;
##                    if (message) {
##                        alert(message);
##                    } else {
##                        alert(result.data.userName + ' 님 환영합니다.');
##                    }
##                    window.location.href = '/bridgeGA?redirectUrl=' + request.redirectUrl;
##                });
##            } else if (result.data.sameUser) {
##                //window.location.href = '/snsLogin';
##                $("#email").val(result.data.snsEmail);
##                $("#password").val('');
##                logIn.controller.displayRequired.message(logIn.controller.ui.submit, false, '* 연동하려는 아이디로 가입되어 있습니다.\n비밀번호를 입력해주세요.');
##            } else {
##                window.location.href = '/signup/acceptTerms';
##            }
##        }).fail(function (jqXHR) {
##            if (jqXHR.responseText) {
##                var result = JSON.parse(jqXHR.responseText);
##                alert(result.msg);
##            }
##        });
##    }
##
##    function goFbProcess() {
##        var request = {};
##        request.autoLogin = $("#autoLogin:checked").val();
##        request.redirectUrl = $("#redirectUrl").val();
##
##        $.post("/sns/fbLogin/process", request, function (result) {
##
##            // Segment and Track Login
##            analytics.track('Logged In', {category: 'Account', label: 'FaceBook Login'});
##
##            if (result.data.userId) {
##                $.ajax({
##                    url: '/coupon/issueNaverCoupon/?target=cookie&userId=' + result.data.userId,
##                    timeout: 1000,
##                    cache: false
##                }).always(function () {
##                    //                    sendGA('로그인,로그인성공_페이스북');
##
##                    var message = result.msg;
##                    if (message) {
##                        alert(message);
##                    } else {
##                        alert(result.data.userName + ' 님 환영합니다.');
##                    }
##
##                    window.location.href = '/bridgeGA?redirect=' + request.redirectUrl;
##                });
##            } else if (result.data.sameUser) {
##                //window.location.href = '/snsLogin';
##                $("#email").val(result.data.snsEmail);
##                $("#password").val('');
##                logIn.controller.displayRequired.message(logIn.controller.ui.submit, false, '* 연동하려는 아이디로 가입되어 있습니다.\n비밀번호를 입력해주세요.');
##            } else {
##                window.location.href = '/signup/acceptTerms';
##            }
##        }).fail(function (jqXHR) {
##            if (jqXHR.responseText) {
##                var result = JSON.parse(jqXHR.responseText);
##                alert(result.msg);
##            }
##        });
##    }
##
##    /* Removed Legacy GA Property UA-27822703-2 (Kevin 21/22/16)
##    $("a[ga-event],button[ga-event]").on('click', function (e) {
##        var data = $(this).attr('ga-event');
##        sendGA(data);
##    });
##    */
##
##    function on() {
##        $('.awd1, .awd2').toggle();
##    };
##</script>
##<script type="text/javascript">
##    $(function() {
##        try {
##            var promotionClickedProperties = function(el) {
##                return {
##                    path: window.location.pathname,
##                    url: window.location.href,
##                    promotion_id: $(el).data("promotion-id"),           // Promotion ID
##                    name: $(el).data("promotion-name"),                 // Promotion Name
##                    label: $(el).data("promotion-name"),                // Label for GA
##                    creative: $(el).data("promotion-creative"),         // Promotion Creative
##                    link: $(el).data("promotion-link"),                 // Promotion Link
##                    position: $(el).data("promotion-position"),         // Promotion Position
##                    id: $(el).data("promotion-id"),                     // segment 2.0 추가사항
##                    value1: $(el).data("promotion-link")                // segment 2.0 추가사항
##                };
##            };
##
##            analytics.trackLink($("[segment-event='Promotion Clicked']"), "Promotion Clicked", promotionClickedProperties);
##        } catch (e) {
##
##        }
##    });
##</script>
##<script src="/web/js/utils/scriptLoader.js?v=1mq-7ptbr5" type="text/javascript">
##</script> <!--=========== 여기부터 복사 ======================-->
##<!-- DTSI SCRIPT -->
##<script src="/web/js/optimize/adiz_sv110.js?v=8kw-g747c6" type="text/javascript">
##</script> <!--// DTSI SCRIPT -->
##<!--=========== 여기 까지 복사 ======================-->
##
##<script src="//wcs.naver.net/wcslog.js" type="text/javascript">
##</script>
##<script>
##
##    if (!wcs_add) var wcs_add={};
##    wcs_add["wa"] = "s_1f26e67e5df";
##    if (!_nasa) var _nasa={};
##    wcs.inflow("memebox.com");
##
##    wcs_do(_nasa);
##
##
##
##    /* Removed Legacy GA Property UA-27822703-2 (Kevin 21/22/16)
##    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
##                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
##            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
##    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
##
##    // Cast GA Tracker Name to 'oldGA' to prevent clash with Segment Analytics
##    ga('create', 'UA-27822703-2', 'auto', 'oldGA');
##    ga('oldGA.require', 'ec');
##    ga('oldGA.require', 'displayfeatures');
##    ga('oldGA.require', 'linkid', 'linkid.js');
##
##    var productPatt = /\/(product|page)\/([0-9])\d+/g
##
##    if (!productPatt.test(window.location.path)) {
##        ga('oldGA.send', 'pageview');
##    }
##    */
##
##
##
##    try {
##
##        var _setlefttime = '360';
##        var _FST_DOMAIN = location.protocol == "https:" ? "https://log.grucompany.co.kr" : "http://log.grucompany.co.kr";
##        document.write(unescape("%3Cscript src='" + _FST_DOMAIN + "/adjs/kcadchk.js' type='text/javascript'%3E%3C/script%3E"));
##    } catch (e) {}
##
##    try {
##
##        var _setlefttime = '1';
##        var _FST_DOMAIN = location.protocol == "https:" ? "https://log.grucompany.co.kr" : "http://log.grucompany.co.kr";
##        document.write(unescape("%3Cscript src='" + _FST_DOMAIN + "/adjs/kcadchk_drt.js' type='text/javascript'%3E%3C/script%3E"));
##    } catch (e) {}
##
##
##
##    try {
##        var _beshow = document.createElement("script");
##        _beshow.type = "text/javascript";
##        _beshow.onload = function () {
##            strack.execute('setDomain', 'memebox.com');
##            strack.trackView();
##        };
##        _beshow.src = "//be.show/plugins/strack/strack.min.js?time=" + (new Date).getTime();
##        document.head.appendChild(_beshow);
##    } catch (e) {}
##
##
##</script>
##<script type="text/javascript">
##    function checkPromotionInViewport() {
##        $(".segment_promotion_item").each(function () {
##            if (isElementInViewport($(this)) && $(this).is(":visible")) {
##                var promotion_id = $(this).data("promotion-id");
##                var promotion_name = $(this).data("promotion-name");
##                var promotion_creative = $(this).data("promotion-creative");
##                var promotion_link = $(this).data("promotion-link");
##                var promotion_position = $(this).data("promotion-position");
##                //                analytics.track("Promotion Viewed", {
##                //                    promotion_id: promotion_id,                         // Promotion ID
##                //                    name: promotion_name,                               // Promotion Name
##                //                    link: promotion_link,                               // Promotion Link
##                //                    creative: promotion_creative,                       // Promotion Creative
##                //                    position: promotion_position,                       // Promotion Position
##                //                    label: promotion_name                               // Label for GA
##                //                });
##
##                //Segment Analytics for Promotion Viewed v2.0
##                analytics.track("Promotion Impression", {
##                    id: promotion_id,                                   // v2.0
##                    value1: promotion_link,                             // v2.0
##                    promotion_id: promotion_id,                         // Promotion ID (Name for now since ID is not useful)
##                    name: promotion_name,                               // Promotion Name
##                    position: promotion_position                       // Promotion Position
##                });
##                $(this).removeClass('segment_promotion_item');
##            }
##        });
##    }
##
##    var timer_promotion;
##
##    // When scrolling, track promotion impressions
##    $(window).scroll(function () {
##        if (timer_promotion) {
##            window.clearTimeout(timer_promotion);
##        }
##        timer_promotion = window.setTimeout(function () {
##            checkPromotionInViewport();
##        }, 10);
##    });
##
##    $(document).ready(function () {
##        checkPromotionInViewport();
##    });
##</script>
##<script src="/package/components/layout/pc/userArea/v.1.0.0/userArea.js?v=1740Tu" type="text/javascript">
##</script>

##페이스북 샘플 자바스크립트
<script>
    window.fbAsyncInit = function() {
        FB.init({
            appId      : '504225513300446',
            xfbml      : true,
            version    : 'v2.8'
        });
        FB.AppEvents.logPageView();
    };

    (function(d, s, id){
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
</script>



</body>
</html>